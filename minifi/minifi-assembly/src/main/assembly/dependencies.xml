<?xml version="1.0"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<assembly>
    <id>bin</id>
    <formats>
        <format>dir</format>
        <format>zip</format>
        <format>tar.gz</format>
    </formats>
    <includeBaseDirectory>true</includeBaseDirectory>
    <baseDirectory>minifi-${project.version}</baseDirectory>

    <dependencySets>
        <!-- Write out all dependency artifacts to lib directory -->
        <dependencySet>
            <scope>runtime</scope>
            <useProjectArtifact>false</useProjectArtifact>
            <outputDirectory>lib</outputDirectory>
            <directoryMode>0770</directoryMode>
            <fileMode>0660</fileMode>
            <useTransitiveFiltering>true</useTransitiveFiltering>
            <includes>
                <!-- Logging -->
                <include>org.slf4j:slf4j-api</include>
                <include>org.slf4j:log4j-over-slf4j</include>
                <include>org.slf4j:jcl-over-slf4j</include>
                <include>org.slf4j:jul-to-slf4j</include>
                <include>ch.qos.logback:logback-classic</include>
                <include>ch.qos.logback:logback-core</include>
                <!-- Apache NiFi -->
                <include>org.apache.nifi:nifi-api</include>
                <include>org.apache.nifi:nifi-framework-api</include>
                <include>org.apache.nifi:nifi-python-framework-api</include>
                <include>org.apache.nifi:nifi-nar-utils</include>
                <include>org.apache.nifi:nifi-properties</include>
                <include>org.apache.nifi:nifi-property-utils</include>
                <include>org.apache.nifi:nifi-runtime</include>
                <include>org.apache.nifi:nifi-server-api</include>
                <include>org.apache.nifi:nifi-stateless-api</include>
                <include>org.apache.nifi:*:nar</include>
                <!-- Apache NiFi MiNiFi -->
                <include>org.apache.nifi.minifi:minifi-commons-utils</include>
                <include>org.apache.nifi.minifi:minifi-framework-api</include>
                <include>org.apache.nifi.minifi:minifi-runtime</include>
                <include>org.apache.nifi.minifi:*:nar</include>
                <include>org.apache.nifi:nifi-mqtt:nar</include>
                <!-- Unfortunately minifi-runtime depends on jackson databind and annotations
                so for now this pollutes the root classloader. -->
                <include>com.fasterxml.jackson.core:jackson-databind</include>
                <include>com.fasterxml.jackson.core:jackson-annotations</include>
                <include>com.fasterxml.jackson.core:jackson-core</include>
                <include>net.bytebuddy:byte-buddy</include>
            </includes>
        </dependencySet>

        <!-- Write out the bootstrap lib component to its own dir -->
        <dependencySet>
            <scope>runtime</scope>
            <useProjectArtifact>false</useProjectArtifact>
            <outputDirectory>lib/bootstrap</outputDirectory>
            <directoryMode>0770</directoryMode>
            <fileMode>0660</fileMode>
            <useTransitiveFiltering>true</useTransitiveFiltering>
            <includes>
                <include>org.eclipse.jetty:*</include>
                <include>*:minifi-bootstrap</include>
                <include>*:minifi-flow-status-report</include>
                <include>*:minifi-commons-utils</include>
                <include>*:nifi-utils</include>
                <include>*:commons-io</include>
                <include>*:commons-lang3</include>
                <include>*:slf4j-api</include>
                <include>*:logback-classic</include>
                <include>*:logback-core</include>
                <include>com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations</include>
            </includes>
        </dependencySet>

        <!-- Write out the conf directory contents -->
        <dependencySet>
            <scope>runtime</scope>
            <useProjectArtifact>false</useProjectArtifact>
            <outputDirectory>./</outputDirectory>
            <directoryMode>0770</directoryMode>
            <fileMode>0664</fileMode>
            <useTransitiveFiltering>true</useTransitiveFiltering>
            <includes>
                <include>*:minifi-resources</include>
            </includes>
            <unpack>true</unpack>
            <unpackOptions>
                <filtered>true</filtered>
                <includes>
                    <include>conf/*</include>
                </includes>
                <excludes>
                    <exclude>conf/authority-providers.xml</exclude>
                    <exclude>conf/authorized-users.xml</exclude>
                    <exclude>conf/identity-providers.xml</exclude>
                    <exclude>conf/zookeeper.properties</exclude>
                </excludes>
            </unpackOptions>
        </dependencySet>

        <!-- Write out the bin directory contents -->
        <dependencySet>
            <scope>runtime</scope>
            <useProjectArtifact>false</useProjectArtifact>
            <outputDirectory>./</outputDirectory>
            <directoryMode>0770</directoryMode>
            <fileMode>0770</fileMode>
            <useTransitiveFiltering>true</useTransitiveFiltering>
            <includes>
                <include>*:minifi-resources</include>
            </includes>
            <unpack>true</unpack>
            <unpackOptions>
                <filtered>false</filtered>
                <includes>
                    <include>bin/*</include>
                </includes>
            </unpackOptions>
        </dependencySet>

        <!-- Write out docs directory contents -->
        <dependencySet>
            <scope>runtime</scope>
            <useProjectArtifact>false</useProjectArtifact>
            <outputDirectory>docs/</outputDirectory>
            <useTransitiveFiltering>true</useTransitiveFiltering>
            <includes>
                <include>*:minifi-docs</include>
            </includes>
            <unpack>true</unpack>
            <unpackOptions>
                <filtered>false</filtered>
                <excludes>
                    <!-- LICENSE and NOTICE both covered by top-level -->
                    <exclude>LICENSE</exclude>
                    <exclude>NOTICE</exclude>
                </excludes>
            </unpackOptions>
        </dependencySet>

        <!-- Write out all dependency artifacts to lib directory -->
        <dependencySet>
            <scope>runtime</scope>
            <useProjectArtifact>false</useProjectArtifact>
            <outputDirectory>python/</outputDirectory>
            <useStrictFiltering>true</useStrictFiltering>
            <useTransitiveDependencies>false</useTransitiveDependencies>
            <includes>
                <include>*:nifi-python-framework</include>
            </includes>
            <unpack>true</unpack>
            <unpackOptions>
                <filtered>false</filtered>
                <excludes>
                    <!-- LICENSE and NOTICE both covered by top-level -->
                    <exclude>LICENSE</exclude>
                    <exclude>NOTICE</exclude>
                    <exclude>META-INF</exclude>
                    <exclude>META-INF/**/*</exclude>
                </excludes>
            </unpackOptions>
        </dependencySet>

        <!-- Write out the python api contents -->
        <dependencySet>
            <scope>runtime</scope>
            <useProjectArtifact>false</useProjectArtifact>
            <outputDirectory>python/api</outputDirectory>
            <useStrictFiltering>true</useStrictFiltering>
            <useTransitiveDependencies>false</useTransitiveDependencies>
            <includes>
                <include>*:nifi-python-extension-api</include>
            </includes>
            <unpack>true</unpack>
            <unpackOptions>
                <filtered>false</filtered>
                <excludes>
                    <!-- LICENSE and NOTICE both covered by top-level -->
                    <exclude>LICENSE</exclude>
                    <exclude>NOTICE</exclude>
                    <exclude>META-INF</exclude>
                    <exclude>META-INF/**/*</exclude>
                </excludes>
            </unpackOptions>
        </dependencySet>
    </dependencySets>
    <fileSets>
        <fileSet>
            <directory>.</directory>
            <outputDirectory>extensions</outputDirectory>
            <excludes>
                <exclude>*/**</exclude>
            </excludes>
        </fileSet>
    </fileSets>
    <files>
        <file>
            <source>src/main/resources/build.properties.template</source>
            <outputDirectory>./</outputDirectory>
            <destName>build.properties</destName>
            <fileMode>0644</fileMode>
            <filtered>true</filtered>
        </file>

        <file>
            <source>./README.md</source>
            <outputDirectory>./</outputDirectory>
            <destName>README</destName>
            <fileMode>0644</fileMode>
            <filtered>true</filtered>
        </file>
        <file>
            <source>./LICENSE</source>
            <outputDirectory>./</outputDirectory>
            <destName>LICENSE</destName>
            <fileMode>0644</fileMode>
            <filtered>true</filtered>
        </file>
        <file>
            <source>./NOTICE</source>
            <outputDirectory>./</outputDirectory>
            <destName>NOTICE</destName>
            <fileMode>0644</fileMode>
            <filtered>true</filtered>
        </file>
    </files>
</assembly>
